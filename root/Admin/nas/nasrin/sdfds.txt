last_address = str(self.fd)
Skip to content
Dashboard
SHIRIN RAFIEI
Account
Dashboard
Courses
Groups
Calendar
Inbox
Help

DV1614PagesExtern Module - asyncio
H19
Home
Announcements
Syllabus
People
Files
Assignments
Discussions
Grades
Kursvärdering - Enkät
Kursvärdering Rapport
Extern Module - asyncio
Sources:
Ramalho, Luciano (2013), Fluent Python, O’Reilly Media
https://docs.python.org (Links to an external site.)
https://aiohttp.readthedocs.io/en/stable/ (Links to an external site.)

This tutorial uses features new in Python 3.7.

 

Concurrency with asyncio
For real parallelism you need multiple cores. A modern personal computer has several CPU cores but is running more than 100 processes at any given time under normal use. Most processing happens concurrently and not in parallel. The computer is constantly handling many processes and makes sure that each of them makes progress, even if the CPU itself can not do more than four things at once (if CPU core count is 4).

asyncio is a package that implements concurrency with coroutines driven by an event loop. It does not deal with threads or true parallelism.

 

The Keywords async and await
To declare a function as a coroutine that is going to be executed in the event loop we let def be preceded by the keyword  async.

Example:

async def read_data(data_base):
    # some code
    return result
To make the current coroutine wait until a called coroutine is finished, suspending it in the meantime and allowing other coroutines to execute while it is waiting we use the keyword await.

Example:

import asyncio

async def hello():
    print('hello')
    await asyncio.sleep(2)
    print('world')

To call a coroutine outside an async scope you need to create the event loop by using the async.run() function.

Example:

 asyncio.run(hello())
 

A Coroutine Example - Text Spinner
In this example an animated spinning bar along with the status text "thinking!" will appear until the "Answer: 42" is available and presented on the screen. The coroutine spin() is created as an eternal loop, so it is wrapped in an asyncio task, and can be interrupted by the Task method cancel(). The function asyncio.create_task() is used to schedule its execution in the event loop and returns the Task object.

import asyncio
import itertools
import sys

async def spin(msg):
    # making alias for sys.stdout f's
    write, flush = sys.stdout.write, sys.stdout.flush
    for char in itertools.cycle('|/-\\'):
        status = char + '' + msg
        write(status)
        flush()
        write('\x08' * len(status))  # backspace to overwrite
        try:
            await asyncio.sleep(0.1)
        except:
            break
    # erase msg and position curser in terminal
    write(' ' * len(status) + '\x08' * len(status))


async def slow_function():
    # pretend waiting a long time for I/O
    await asyncio.sleep(5)
    return 42


async def supervisor():
    spinner = asyncio.create_task(spin('thinking!'))
    print('spinner object:', spinner)
    result = await slow_function()
    spinner.cancel()  # interrupt the spin function when result retrieved
    return result


def main():
    result = asyncio.run(supervisor())
    print('Answer:', result)


if __name__ == '__main__':
    main()
 

Downloading with asyncio and aiohttp
This is a program downloading image files of country flags from the web at http://flupy.org/data/flags (Links to an external site.). In there is one directory for each country code containing an .img file with the same name. Example: se/se.img (for the Swedish flag). The file downloads are set off concurrently.

import os
import time
import sys
import asyncio
import aiohttp

BASE_URL = 'http://flupy.org/data/flags'
DEST_DIR = 'downloads/'
COUNTRY_CODES = 'CN IN US DK BR PK NG SE RU JP MX PH VN ET EG DE IR TR CD FR'.split()


def save_flag(image, filename):
    path = os.path.join(DEST_DIR, filename)
    with open(path, 'wb') as file_handle:
        file_handle.write(image)


def show(text):
    print(text, end=' ')
    sys.stdout.flush()


async def get_raw_content(session, url):
    async with session.get(url) as response:
        return await response.content.read()


async def get_flag(code):
    code = code.lower()
    url = f'{BASE_URL}/{code}/{code}.gif'
    async with aiohttp.ClientSession() as session:
        image = await ger_raw_content(session, url)
    return image


async def download_one(code):
    image = await get_flag(code)
    show(code)
    save_flag(image, code.lower() + '.gif')
    return code


async def download_many(cc_list):
    tasks = [asyncio.create_task(download_one(code)) for code in cc_list]
    result = await asyncio.gather(*tasks)
    return len(result)


async def main():
    start_time = time.time()
    count = await download_many(COUNTRY_CODES)
    elapsed = time.time() - start_time
    message = f'\n{count} flags downloaded in {elapsed:2f}s'
    print(message)


if __name__ == '__main__':
    asyncio.run(main())

 

 

Multiple Requests for Each Download 
Suppose we want to save each country flag with the name of the country and the country code instead of just the country code. We also want to print the full country names in the terminal instead. Now we need to make two HTTP requests per flag: one to get the flag image itself, and one to get the metadata.json file in the same directory as the image. That is where the name of the country is stored in the dict key-value pair with the key 'country'. The following code is just a small adjustment compared to the former example.

import os
import time
import sys
import asyncio
import aiohttp

BASE_URL = 'http://flupy.org/data/flags'
DEST_DIR = 'downloads/'
COUNTRY_CODES = 'CN IN US DK BR PK NG SE RU JP MX PH VN ET EG DE IR TR CD FR'.split()


def save_flag(image, filename):
    path = os.path.join(DEST_DIR, filename)
    with open(path, 'wb') as file_handle:
        file_handle.write(image)


def show(text):
    print(text, end=' ')
    sys.stdout.flush()


async def get_raw_content(session, url):
    """Fetch binary file data from url"""
    async with session.get(url) as response:
        return await response.content.read()


async def get_json(session, url):
    """Retrieve info from a json file and return as dict"""
    async with session.get(url) as response:
        result_dict = await response.json()
    return result_dict


async def get_flag(code):
    code = code.lower()
    url = f'{BASE_URL}/{code}/{code}.gif'
    async with aiohttp.ClientSession() as session:
        image = await get_raw_content(session, url)
    return image


async def get_country(code):
    code = code.lower()
    url = f'{BASE_URL}/{code}/metadata.json'
    async with aiohttp.ClientSession() as session:
        metadata = await get_json(session, url)
    return metadata['country']


async def download_one(code):
    image_task = asyncio.create_task(get_flag(code))
    country_task = asyncio.create_task(get_country(code))
    image, country = await asyncio.gather(image_task, country_task)
    show(country + '\n')
    save_flag(image, code + '_' + country + '.gif')
    return code


async def download_many(cc_list):
    tasks = [asyncio.create_task(download_one(code)) for code in cc_list]
    result = await asyncio.gather(*tasks)
    return len(result)


async def main():
    start_time = time.time()
    count = await download_many(COUNTRY_CODES)
    elapsed = time.time() - start_time
    message = f'\n{count} flags downloaded in {elapsed:2f}s'
    print(message)


if __name__ == '__main__':
    asyncio.run(main())

 

Writing asyncio Servers
A simple introducing example of a TCP server is an echo server. It only returns the text sent from a client back again. In the examples we use localhost (IP nr 127.0.0.1)  to not have to deal with firewall restrictions. You will confront these problems later on in networking courses.

The part signal.signal(signal.SIGINT, signal.SIG_DFL) makes it possible to terminate the server with CTRL+C. 

asyncio has a function start_server() that starts a socket server. You can read about the function in detail on https://docs.python.org/3/library/asyncio-stream.html. (Links to an external site.)

To make the server accept new connections from clients we call the Server method serve_forever(). It will  make the server accept new connections until it is terminated.

The function handle_echo()  is executed whenever a new connection is established and given two parameters provided by the start_server()function. They are paired as (reader, writer) and are instances of StreamReader and StreamWriter respectively. These objects are dealing with data as byte streams with the type bytes. To convert an object to a string we use the method decode() . To convert a string object to the type bytes we use the method encode().

Echo Server Code

import asyncio
import signal

signal.signal(signal.SIGINT, signal.SIG_DFL)

async def handle_echo(reader, writer):
    addr = writer.get_extra_info('peername')
    message = f"{addr} is connected !!!!"
    print(message)
    while True:
        data = await reader.read(100)
        message = data.decode().strip()
        if message == 'exit':
            break

        print(f"Received {message} from {addr}")
        print(f"Send: {message}")
        writer.write(data + '\n'.encode())
        await writer.drain()
    print("Close the connection")
    writer.close()


async def main():
    server = await asyncio.start_server(
        handle_echo, '127.0.0.1', 8888)

    addr = server.sockets[0].getsockname()
    print(f'Serving on {addr}')

    async with server:
        await server.serve_forever()


asyncio.run(main())
 

You can connect to this simple server with a Telnet client or use Putty (Links to an external site.) with raw connection type as a client. You could also write your own client code to run from an external terminal window.

Client Code Example

import asyncio


async def tcp_echo_client():
    reader, writer = await asyncio.open_connection(
        '127.0.0.1', 8888)
    message = ''
    while True:
        message = input('[Enter Message]\n')
        if message == 'exit':
            break

        writer.write(message.encode())
        data = await reader.read(100)
        print(f'Received: {data.decode()}')
    print('Close the connection')
    writer.close()


asyncio.run(tcp_echo_client())
 

 It is test
